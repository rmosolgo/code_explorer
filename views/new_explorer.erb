<script src="http://d3js.org/d3.v3.min.js"></script>

<p id='data'>
</p>
<div id='vis'>
</div>
<div id='loading_box' class='span12 well well-small' style='width:100%;height:200px;'>	
	<p>Loading data: 
		<div class="progress progress-striped active">
 			 <div id='loading_bar' class="bar" style="width: 0%;"></div>
		</div>
		<small style='color:#999;font-style:italic;'id='status'>...</small>
	</p>
</div>
<script>
	var data,total_codes, added_codes,status_timer;
	var cached_data= {}
	parent = 'nil'

	function status(msg) {
		action_time = (new Date) - status_timer
		msg = Math.round(action_time/100)/10 + "s: " + msg
		console.log(msg)	
		$("#status").prepend(msg+"<br>")
	}
	function reset_status() {
		status_timer = new Date
		$('#loading_bar').css('width', "0%")
		$("#status").text('')
		$('#loading_box').slideDown()
	}

	function create_from_parent(parent) {
		if (typeof parent == 'undefined')
			{ return }
		reset_status()
		if (cached_data[parent]) {
			status("Using cached data")
			$('#loading_box').slideUp()
			plot(cached_data[parent])
		}
		else
		{
			status("Requesting new data")
			$.post('/query', {parent: parent}, function(codes) {
				data = $.parseJSON(codes)
				total_codes = data.length
				$('#loading_bar').css('width', "20%")
				added_codes = 0
				status("Loaded data for "+parent+", now fetching "+total_codes+" more.")
				data.forEach(function(d) {
					$.post('/query', {parent: d.code}, function(codes) {
						added_codes +=1
						status("Loaded data for "+d.code+". ("+added_codes+"/"+total_codes+")")
						d.children = $.parseJSON(codes)
						d.children.forEach(function (c) { delete c.children })
						$('#loading_bar').css('width', Math.round(20 + ((added_codes/total_codes)*80))+"%")
						if (added_codes == total_codes)
							{	$('#loading_box').slideUp()
								cached_data[parent] = data
								if (parent == '0')
									{ plot( data) }
								else {plot(data)}
							}
					})
				})
			})
		}
	}

	create_from_parent('0')


var path,
	width = 960,
    height = 700,
    radius = Math.min(width, height) / 2,
    color = d3.scale.category20c(),
    x = d3.scale.linear().range([0, width]),
    y = d3.scale.linear().range([0, height])

	var vis = d3.select("#vis").append("svg")
	    .attr("width", width)
	    .attr("height", height)


function plot(data) {
	var partition = d3.layout.partition()
	    .sort(null)
	    .value(function(d) { return d3.max([d.all_children, 1]) ; }); // relative value of each node

	  console.log(data)
	  plot_data = partition.nodes({children: data})
	  console.log(plot_data)

	  path = vis.selectAll(".code")
	      .data(plot_data, function(d) {return d.code})

	  path.enter().append("svg:rect")
	      //.attr("display", function(d) { return d.depth ? null : "none"; }) // hide inner ring
	   	  .attr('class', 'code')
	      .attr("fill-rule", "evenodd")
	      .style("stroke", "#fff")
	      .style("fill", function(d) { return color(d.code); })
	      .on("click", click)
	      .append('title')
	      	.text(function(d) {return d.code})
	 
	  path
	      .attr("x", function(d) { return x(d.x); })
	      .attr("y", function(d) { return y(d.y); })
	      .attr("width", function(d) { return x(d.dx); })
	      .attr("height", function(d) { return y(d.dy); })  

	  path.exit().remove()
}

function add_layer(data) {
	var partition = d3.layout.partition()
	    .sort(null)
	    .value(function(d) { return d3.max([d.all_children, 1]) ; }); // relative value of each node

	  console.log(data)
	  plot_data = partition.nodes({children: data})
	  console.log(plot_data)

	  path = vis.selectAll(".code")
	      .data(plot_data, function(d) {return d.code})

	  path.enter().append("svg:rect")
	      //.attr("display", function(d) { return d.depth ? null : "none"; }) // hide inner ring
	   	  .attr('class', 'code')
	      .attr("fill-rule", "evenodd")
	      .style("stroke", "#fff")
	      .style("fill", function(d) { return color(d.code); })
	      .on("click", click)
	      .append('title')
	      	.text(function(d) {return d.code})
	 
	  path
	      .attr("x", function(d) { return x(d.x); })
	      .attr("y", function(d) { return y(d.y); })
	      .attr("width", function(d) { return x(d.dx); })
	      .attr("height", function(d) { return y(d.dy); })  

	  path.exit().remove()
}


  function click(d) {
  	console.log("Clicked "+d.code)
    x.domain([d.x, d.x + d.dx]);
    y.domain([d.y, 1]).range([d.y ? 20 : 0, height]);
    path.transition()
      .duration(750)
      .attr("x", function(d) { return x(d.x); })
      .attr("y", function(d) { return y(d.y); })
      .attr("width", function(d) { return x(d.x + d.dx) - x(d.x); })
      .attr("height", function(d) { return y(d.y + d.dy) - y(d.y); });
    create_from_parent(d.code)
  }


</script>