

<script src="http://d3js.org/d3.v3.min.js"></script>
<div class='row'>
	<div id='tooltip'  style='display:none;padding:3px;border:1px solid #999;position:absolute;background-color:hsla(255,0%,90%,.8);'>
		<span id='tooltiptext' style='font-weight:bold;'>Mouseover a code to see detail.
		</span>
	</div>


	<div id='chart' class='span8' style='margin-top:50px'>
	</div>
</div>
<script>

$('#nav_explore').addClass('active')


var j=1,
    w = $('#chart').width(),
    h = $('#chart').width(),
    r = d3.max([w / 2, h /2 ])
    x = d3.scale.linear().range([0, 2 * Math.PI]),
    y = d3.scale.sqrt().domain([0, .1,  1]).range([1, r/2,  r]),
    section_stroke_width = 1,
    p = 5, // padding
    duration = 500,
      // Stores position for both zoom and click
    Position = {
      translate: [0,0],
      scale: 1,
    };


var items, nodes, data; 

    start_index_100 = 1
    start_index_200 = 298
    start_index_300 = 428
    start_index_400 = 635
    start_index_500 = 697
    start_index_600 = 722
    start_index_700 = 735
    start_index_900 = 767
    end_index = 789

    vis_red = '#d11'
    vis_orange = '#d71'
    vis_yellow = '#dd1'
    vis_yellow_green = '#8d1'
    vis_green='green'
    vis_blue= '#47e'
    vis_indigo = 'indigo'

function revColor (c) {
  if (c==0) {return '#ddd'}
  else if (c>=start_index_900&&c<end_index) {
    newColor = d3.scale.linear().range(['#eee','#777','#eee']).domain([start_index_900, start_index_900+1, end_index-1])
  } 
  else if (c>=start_index_700&&c<start_index_900) {
    newColor = d3.scale.linear().range(['indigo','violet']).domain([start_index_700, start_index_900])
  }
  else if (c>=start_index_600&&c<start_index_700) {
    newColor = d3.scale.linear().range(['darkblue','#253cb7']).domain([start_index_600, start_index_700])
  }
  else if (c>=start_index_500&&c<start_index_600) {
    newColor = d3.scale.linear().range([vis_blue, '#253cb7',vis_blue]).domain([start_index_500, start_index_500+1, start_index_600-1])
  }
  else if (c>=start_index_400&&c<start_index_500) {
    newColor = d3.scale.linear().range([vis_green,vis_yellow_green]).domain([start_index_400, start_index_500])
  }
  else if (c>=start_index_300&&c<start_index_400) {
    newColor = d3.scale.linear().range([vis_yellow,vis_yellow_green,vis_yellow]).domain([start_index_300, start_index_300+1, start_index_400-1])
  } 
    else if (c>=start_index_200&&c<start_index_300) {
    newColor = d3.scale.linear().range([ vis_orange, vis_red, vis_orange]).domain([start_index_200, start_index_200+1, start_index_300-1])
  }
  else if (c>=start_index_100&&c<start_index_200) {
    newColor = d3.scale.linear().range([vis_red, vis_orange]).domain([start_index_100,start_index_200-1])
  }
  return newColor(c);
}
var zoom = d3.behavior.zoom().translate(Position.translate).scale(Position.scale).on("zoom", zoomAction)
var t = 0
function zoomAction() {
  t++
  Position.translate = d3.event.translate
  Position.scale = d3.event.scale
  console.log("zoom", t, Position.translate, Position.scale,  "event.t:", d3.event.translate, "event.s:", d3.event.scale)
  items.attr('stroke-width', d3.min([section_stroke_width, (section_stroke_width/Position.scale)])+"px" )
  d3.selectAll('.code-text').style("font-size", appropriate_text_size())
  outer_vis
    .attr("transform", "translate(" +Position.translate+ ") " +
                       "scale(" + Position.scale + ")"); 
}
var svg = d3.select("#chart")
    .append("svg")
        .attr("width", w + p * 2)
        .attr("height", h + p * 2)
        .style("border", "2px solid #ccc")
var defs = svg.append('defs')

var outer_vis = svg.append("g")
      .call(zoom)
      .append("g")

var vis = outer_vis.append("g")   
      .attr("transform", "translate(" + (r+p) +','+ (r+p)+ ")") // This one doesn't move. 
var partition = d3.layout.partition()
    .sort(null)
    .value(function(d) { return d.depth; })

    
var arc = d3.svg.arc()
    .startAngle(function(d,i) {return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
    .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
    .innerRadius(function(d,i) {return Math.max(0, d.y ? y(d.y) : 0);})
    .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });


d3.json("/code_tree", function(purposeCodes) {
  data=purposeCodes
make_sunburst(purposeCodes)
	})

function make_sunburst(purposeCodes) {
	nodes = partition.nodes(purposeCodes)

	items = vis.selectAll("path").data(nodes)
	 
	items.enter().append("path")
	      .attr("id", function(d, i) { return "path-" + d.code.replace(/\./, ''); }) // the dot messes it up
	      .attr("class", "wedge")
	      .attr("d", arc)
        .attr("display", function(d) { return d.depth ? null : "none"; }) // hide inner ring
	      .style("fill", function(d, i) {return revColor(i);})
	      .style("stroke", "#000")
	      .style("opacity", "0")
	      .style("stroke-weight", section_stroke_width+ "px")
	      .style("cursor", "pointer")
        .attr('parent-code', function(d) {return d.parent ? d.parent.code : "" })
        .attr('datum-index', function(d,i) {return i})
        .attr('datum-code', function(d) {return d.code})
        .attr('count-children', function(d) {return d.children ? d.children.length : 0 })
        .attr('count-activities-children', function(d) {return d.all_activity_children})
	      .on("click", sunburst_click)
	      .on("mouseover",sunburst_mouseover)
	      .on("mouseout", sunburst_mouseout)
		
    items.transition()
		  	.delay(function(d, i) {return (i*(1.5))})
		  	.duration(500)
		  	.style("opacity", "1")
}     

function sunburst_click(d, i) {
  //zoom_to_self_and_children(d, i)
  highlight_this_and_parents(d, i)
  add_text_to_this(d, i)
  // load_detail(d, i)
}

function highlight_this_and_parents(d,i) {
  $('[highlighted=true]').attr("highlighted", "false").each(
    function(j, h) {
      $(h)
        .css('fill', revColor($(h).attr('datum-index')))
        .css('stroke', 'black')}
    )
  change_self_and_parents_of(d.code, "highlight")
}

function add_text_to_this(d, i) {
  var this_path = $('#path-'+d.code.replace(/\./, ''))
  
  $('.code-text').remove()

  text = vis.append('text')
    .attr('class', 'code-text')
    .attr("x", 2)
    .attr("dy", 22 + "px")
    .attr("font-size", appropriate_text_size(d, i) )
    .attr("text-anchor", "start") 
  if (d.all_activity_children > 5) // Lots of activities 
    { text.append('svg:textPath')
      .attr('xlink:href', '#path-'+d.code)
      .text(d.name);
    }
  else { console.log(this_path.attr('d'))}

}

function appropriate_text_size(d, i) {

  size = Math.round(14/Position.scale)+'px'
  return size
}

function zoom_to_self_and_children(d, i) {
  this_path = $('#path-'+d.code.replace(/\./, ''))
  var this_centroid = arc.centroid(d)
  // Just to see where it ~should~ zoom
  vis.append('circle')
    .attr('cx', this_centroid[0])
    .attr('cy', this_centroid[1])
    .attr('r', '5px')
    .attr('fill', '#f00')

  Position.translate[0] = -(this_centroid[0]/(Position.scale)) //(-(Position.translate[0] + (this_centroid[0])))*Position.scale
  Position.translate[1] = -(this_centroid[1]/(Position.scale)) // (-(Position.translate[1] + (this_centroid[1])))*Position.scale
  
  zoom.scale(Position.scale).translate(Position.translate)
  console.log("click", Position.translate, Position.scale, "centroid:", this_centroid)
  outer_vis
    .transition()
    .duration(duration/2)
    .attr('transform', 'translate('+ Position.translate + ') scale('+ Position.scale  +')')
  
}

function left_panel(d, i) {
	$('#tooltiptext').text(d.name)

}

function change_self_and_parents_of(code, alteration) {
  this_path = $('#path-'+code.replace(/\./, ''))
  original_color = d3.rgb(revColor(parseInt(this_path.attr('datum-index'))))
  if (alteration=='highlight')
    { 
      this_path
        .attr("highlighted", "true")
        .css("fill", original_color.brighter().brighter())
        .css("stroke", "white")
       }
  else if (alteration=='brighter'&& this_path.attr("highlighted")!="true")
    { 
      this_path
        .css("fill", original_color.brighter())
        .css("stroke", "white")
       }
  else if (alteration == 'original' && this_path.attr("highlighted")!="true")
    { this_path
        .css("fill", original_color)
        .css("stroke", "black") }  
  if (this_path.attr("parent-code").length > 0) {
    change_self_and_parents_of(this_path.attr("parent-code"), alteration)
  }
}


function sunburst_mouseover(d,i){
    $('#tooltip').show()
  change_self_and_parents_of(d.code, "brighter")
	left_panel(d,i)
}

function sunburst_mouseout(d,i){
  change_self_and_parents_of(d.code, "original")
	d3.select(this)
		.style('stroke', '#000')
  $('#tooltip').hide()
}



//Get mouse position and move tooltip
var mousePosition;
function updateMousePosition(event) {
    mousePosition = {left: event.pageX, top: event.pageY}
     $('div#tooltip').css('left',mousePosition.left + 20)
     $('div#tooltip').css('top',mousePosition.top-10) 
}
$(function(){$(document).mousemove(updateMousePosition);})

</script>