// Generated by CoffeeScript 1.4.0
(function() {
  var Position, add_text_to_this, appropriate_text_size, arc, change_self_and_parents_of, default_dy, default_dy_margin, default_font_size, duration, end_index, h, highlight_this_and_parents, items, j, left_panel, make_sunburst, outer_vis, p, partition, r, revColor, section_stroke_width, split_to_fit, start_index_100, start_index_200, start_index_300, start_index_400, start_index_500, start_index_600, start_index_700, start_index_900, sunburst_click, sunburst_mouseout, sunburst_mouseover, svg, t, updateMousePosition, vis, vis_blue, vis_green, vis_indigo, vis_orange, vis_red, vis_yellow, vis_yellow_green, w, x, y, zoom, zoomAction, zoom_to_self_and_children,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $('#nav_explore').addClass('active');

  j = 1;

  w = $('#chart').width();

  h = $('#chart').width();

  r = d3.max([w / 2, h / 2]);

  x = d3.scale.linear().range([0, 2 * Math.PI]);

  y = d3.scale.sqrt().domain([0, .3, 1]).range([1, r / 2, r]);

  section_stroke_width = 1;

  p = 5;

  duration = 500;

  Position = {
    translate: [0, 0],
    scale: 1
  };

  start_index_100 = 1;

  start_index_200 = 298;

  start_index_300 = 428;

  start_index_400 = 635;

  start_index_500 = 697;

  start_index_600 = 722;

  start_index_700 = 735;

  start_index_900 = 767;

  end_index = 789;

  vis_red = '#d11';

  vis_orange = '#d71';

  vis_yellow = '#dd1';

  vis_yellow_green = '#8d1';

  vis_green = 'green';

  vis_blue = '#47e';

  vis_indigo = 'indigo';

  revColor = function(c) {
    c = Number(c);
    if (c === 0) {
      return "#ddd";
    } else if ((start_index_200 > c && c >= start_index_100)) {
      return d3.scale.linear().range([vis_red, vis_orange]).domain([start_index_100, start_index_200 - 1])(c);
    } else if ((start_index_300 > c && c >= start_index_200)) {
      return d3.scale.linear().range([vis_orange, vis_red, vis_orange]).domain([start_index_200, start_index_200 + 1, start_index_300 - 1])(c);
    } else if ((start_index_400 > c && c >= start_index_300)) {
      return d3.scale.linear().range([vis_yellow, vis_yellow_green, vis_yellow]).domain([start_index_300, start_index_300 + 1, start_index_400 - 1])(c);
    } else if ((start_index_500 > c && c >= start_index_400)) {
      return d3.scale.linear().range([vis_green, vis_yellow_green]).domain([start_index_400, start_index_500])(c);
    } else if ((start_index_600 > c && c >= start_index_500)) {
      return d3.scale.linear().range([vis_blue, '#253cb7', vis_blue]).domain([start_index_500, start_index_500 + 1, start_index_600 - 1])(c);
    } else if ((start_index_700 > c && c >= start_index_600)) {
      return d3.scale.linear().range(['darkblue', '#253cb7']).domain([start_index_600, start_index_700])(c);
    } else if ((start_index_900 > c && c >= start_index_700)) {
      return d3.scale.linear().range(['indigo', 'violet']).domain([start_index_700, start_index_900])(c);
    } else if ((end_index > c && c >= start_index_900)) {
      return d3.scale.linear().range(['#eee', '#777', '#eee']).domain([start_index_900, start_index_900 + 1, end_index - 1])(c);
    } else {
      console.log(c);
      return "#a23";
    }
  };

  zoomAction = function() {
    t++;
    Position.translate = d3.event.translate;
    Position.scale = d3.event.scale;
    console.log("zoom", t, Position.translate, Position.scale, "event.t:", d3.event.translate, "event.s:", d3.event.scale);
    items.attr('stroke-width', d3.min([section_stroke_width, section_stroke_width / Position.scale]) + "px");
    return outer_vis.attr("transform", "translate(" + Position.translate + ") scale(" + Position.scale + ")");
  };

  zoom = d3.behavior.zoom().translate(Position.translate).scale(Position.scale).on("zoom", zoomAction);

  t = 0;

  svg = d3.select("#chart").append("svg").attr("width", w + p * 2).attr("height", h + p * 2).style("border", "2px solid #ccc");

  outer_vis = svg.append("g").call(zoom).append("g");

  vis = outer_vis.append("g").attr("transform", "translate(" + (r + p) + "," + (r + p) + ")");

  items = vis.selectAll("path");

  partition = d3.layout.partition().sort(null).value(function(d) {
    return d.depth;
  });

  arc = d3.svg.arc().startAngle(function(d, i) {
    return Math.max(0, Math.min(2 * Math.PI, x(d.x)));
  }).endAngle(function(d, i) {
    return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));
  }).innerRadius(function(d, i) {
    var d_y, _ref;
    d_y = (_ref = y(d.y)) != null ? _ref : 0;
    return Math.max(0, d_y);
  }).outerRadius(function(d, i) {
    return Math.max(0, y(d.y + d.dy));
  });

  d3.json("/code_tree", function(purposeCodes) {
    var data;
    data = purposeCodes;
    return make_sunburst(purposeCodes);
  });

  make_sunburst = function(purposeCodes) {
    var nodes;
    nodes = partition.nodes(purposeCodes);
    items = vis.selectAll("path").data(nodes);
    items.enter().append("path").attr("id", function(d, i) {
      return "path-" + d.code.replace(/\./, '');
    }).attr("class", "wedge").attr("d", arc).attr("display", function(d, i) {
      var _ref;
      return (_ref = d.depth > 0) != null ? _ref : {
        "null": "none"
      };
    }).style("fill", function(d, i) {
      return revColor(i);
    }).style("stroke", "#000").style("opacity", "0").style("stroke-weight", section_stroke_width + "px").style("cursor", "pointer").attr('parent-code', function(d) {
      var _ref, _ref1;
      return (_ref = (_ref1 = d.parent) != null ? _ref1.code : void 0) != null ? _ref : "";
    }).attr('datum-index', function(d, i) {
      return i;
    }).attr('datum-code', function(d) {
      return d.code;
    }).attr('count-children', function(d) {
      var _ref, _ref1;
      return (_ref = (_ref1 = d.children) != null ? _ref1.length : void 0) != null ? _ref : 0;
    }).attr('count-activities-children', function(d) {
      return d.all_activity_children;
    }).on("click", sunburst_click).on("mouseover", sunburst_mouseover).on("mouseout", sunburst_mouseout);
    return items.transition().delay(function(d, i) {
      return i * 1.5;
    }).duration(500).style("opacity", "1");
  };

  sunburst_click = function(d, i) {
    highlight_this_and_parents(d, i);
    return add_text_to_this(d, i);
  };

  highlight_this_and_parents = function(d, i) {
    $('[highlighted=true]').attr("highlighted", "false").each(function(j, h) {
      return $(h).css('fill', revColor($(h).attr('datum-index'))).css('stroke', 'black');
    });
    return change_self_and_parents_of(d.code, "highlight");
  };

  default_font_size = 13;

  default_dy = 15;

  default_dy_margin = 2;

  add_text_to_this = function(d, i) {
    var allowable_width, display_ratio, dy, height_ratio, label, length_ratio, line, longest_line, multiline_text, number_of_lines, recommended_size_by_height, resize_ratio, size, slice_height_in_lines, text, this_path, width_by_codes, _i, _j, _len, _len1;
    this_path = $('#path-' + d.code.replace(/\./, ''));
    $('.code-text').remove();
    width_by_codes = d.all_activity_children;
    if (width_by_codes >= 6) {
      allowable_width = Math.round(width_by_codes / 3);
      display_ratio = d.name.length / allowable_width;
      if (display_ratio < 1) {
        size = default_font_size;
        dy = default_dy;
        label = d.name;
      } else {
        multiline_text = split_to_fit(d.name, allowable_width);
        console.log(multiline_text);
        number_of_lines = multiline_text.length;
        slice_height_in_lines = d.dy * (3 / .1666);
        height_ratio = slice_height_in_lines / number_of_lines;
        recommended_size_by_height = height_ratio * default_font_size;
        longest_line = 0;
        for (_i = 0, _len = multiline_text.length; _i < _len; _i++) {
          line = multiline_text[_i];
          if (line.length > longest_line) {
            longest_line = line.length;
          }
        }
        length_ratio = allowable_width / longest_line;
        resize_ratio = Math.min(1, length_ratio, height_ratio);
        size = resize_ratio * default_font_size;
        dy = resize_ratio * default_dy;
      }
    }
    if (label != null) {
      text = vis.append('text').attr('class', 'code-text').attr("x", 2).attr("dy", "" + dy + "px").attr("font-size", "" + size + "px").attr("text-anchor", "start");
      text.append('svg:textPath').attr('xlink:href', '#path-' + d.code).text(label);
    } else if (multiline_text != null) {
      for (i = _j = 0, _len1 = multiline_text.length; _j < _len1; i = ++_j) {
        label = multiline_text[i];
        text = vis.append('text').attr('class', 'code-text').attr("x", 2).attr("dy", "" + (dy + (i * dy)) + "px").attr("font-size", "" + size + "px").attr("text-anchor", "start");
        text.append('svg:textPath').attr('xlink:href', '#path-' + d.code).text(label);
      }
    }
    return console.log(d);
  };

  split_to_fit = function(string, allowable_width) {
    var end_of_word, new_strings, next_split, shorter_string, splitters, w2, _i, _j, _ref, _ref1, _ref2;
    console.log("splitting '" + string + "' to fit " + allowable_width);
    splitters = [' ', ',', '-', '.'];
    new_strings = [];
    for (w = _i = allowable_width; allowable_width <= 0 ? _i <= 0 : _i >= 0; w = allowable_width <= 0 ? ++_i : --_i) {
      if (_ref = string[w], __indexOf.call(splitters, _ref) >= 0) {
        console.log("found a splitter at " + w + " in " + string);
        if (string[w] === ' ') {
          end_of_word = w - 1;
        } else {
          end_of_word = w;
        }
        new_strings.push(string.slice(0, +end_of_word + 1 || 9e9));
        shorter_string = string.slice(w + 1);
        if (shorter_string.length > allowable_width) {
          next_split = split_to_fit(shorter_string, allowable_width);
          console.log("split_to_fit is joining in", next_split, " to ", new_strings);
          new_strings = new_strings.concat(next_split);
          console.log("after joining in", next_split, ", split_to_fit has ", new_strings);
        } else {
          new_strings.push(shorter_string);
        }
        break;
      } else if (w === 0) {
        for (w2 = _j = 0, _ref1 = string.length; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; w2 = 0 <= _ref1 ? ++_j : --_j) {
          if (_ref2 = string[w2], __indexOf.call(splitters, _ref2) >= 0) {
            if (string[w2] === ' ') {
              end_of_word = w2 - 1;
            } else {
              end_of_word = w2;
            }
            new_strings.push(string.slice(0, +end_of_word + 1 || 9e9));
            shorter_string = string.slice(w2 + 1);
            if (shorter_string.length > allowable_width) {
              next_split = split_to_fit(shorter_string, allowable_width);
              console.log("split_to_fit is joining in", next_split, " to ", new_strings);
              new_strings = new_strings.concat(next_split);
              console.log("after joining in", next_split, ", split_to_fit has ", new_strings);
            } else {
              new_strings.push(shorter_string);
            }
            break;
          } else if (w2 === string.length) {
            console.log("no split found in '" + string + "', returning it anyways!");
            new_strings.push(string);
          }
        }
      }
    }
    console.log('split_to_fit is returning', new_strings);
    return new_strings;
  };

  appropriate_text_size = function(d, i) {
    var size;
    size = "" + (Math.min(Math.round(14. * (d.all_activity_children / d.name.length)), 14)) + "px";
    console.log(size);
    return size;
  };

  zoom_to_self_and_children = function(d, i) {
    var this_centroid, this_path;
    this_path = $('#path-' + d.code.replace(/\./, ''));
    this_centroid = arc.centroid(d);
    vis.append('circle').attr('cx', this_centroid[0]).attr('cy', this_centroid[1]).attr('r', '5px').attr('fill', '#f00').append('title').text(d.name);
    zoom.scale(Position.scale).translate(Position.translate);
    return console.log("click", Position.translate, Position.scale, "centroid:", this_centroid);
  };

  left_panel = function(d, i) {
    return $('#tooltiptext').text(d.name);
  };

  change_self_and_parents_of = function(code, alteration) {
    var original_color, this_path;
    this_path = $('#path-' + code.replace(/\./, ''));
    original_color = d3.rgb(revColor(parseInt(this_path.attr('datum-index'))));
    if (alteration === 'highlight') {
      this_path.attr("highlighted", "true").css("fill", original_color.brighter().brighter()).css("stroke", "white");
    } else if (alteration === 'brighter' && this_path.attr("highlighted") !== "true") {
      this_path.css("fill", original_color.brighter()).css("stroke", "white");
    } else if (alteration === 'original' && this_path.attr("highlighted") !== "true") {
      this_path.css("fill", original_color).css("stroke", "black");
    }
    if (this_path.attr("parent-code").length > 0) {
      return change_self_and_parents_of(this_path.attr("parent-code"), alteration);
    }
  };

  sunburst_mouseover = function(d, i) {
    $('#tooltip').show();
    change_self_and_parents_of(d.code, "brighter");
    return left_panel(d, i);
  };

  sunburst_mouseout = function(d, i) {
    change_self_and_parents_of(d.code, "original");
    d3.select(this).style('stroke', '#000');
    return $('#tooltip').hide();
  };

  updateMousePosition = function(event) {
    var mousePosition;
    mousePosition = {
      left: event.pageX,
      top: event.pageY
    };
    $('div#tooltip').css('left', mousePosition.left + 20);
    return $('div#tooltip').css('top', mousePosition.top - 10);
  };

  $(function() {
    return $(document).mousemove(updateMousePosition);
  });

}).call(this);
